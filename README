A server sending the contents of a file, and a client receiving and storing it on disk, both implemented in C. I used a sliding window protocol with selective retransmission. Things to take into account:
- the sent frames could have been altered => performed XOR on bytes and also sent the result for the client to perform this check
- the sent frames could have been lost
- the sent frames could have been sent in a different order then initially sent => sent also the index number of the frame
- there was a timeout

In send.c:
- compute the window size
- read the file from the disk
- create an array of msg structures
- start sending frames; the number of sent but unconfirmed frames at a given time must be <= window size
- in a loop, I wait for ACKs and NACKs 
- in the end, I wait for DONE

In recv.c:
- I also keep an array of msg structures for storing the out-of-order frames
- fixed timeout of 2ms
- last_confirmed variable stores the inndex of the last package received in the right order
- I send NACK once if the received package is not the one expected; then keep sending ACK for the last good package received
